// https://www.gams.com/latest/docs/UG_GAMSPrograms.html#UG_GAMSPrograms_Identifiers

start: statement+

?statement: [macro_conditional] ( declare_def_st | exec_st
								| COMMENT_BLOCK )

?declare_def_st:  symbol_def
				| eq_def
				| model_def
				| acronym_def
				| file_st
				| func_import

?exec_st: abort_st
		| assignment
		| break_st
		| continue_st
		| display
		| execute
		| for_st
		| if_st
		| macro
		| loop_st
		| option
		| solve_st
		| put_st_variants
		| put_st
		| repeat_st
		| while_st


// ===================== DECLARATION/DEFINITION STATEMENTS =====================

// ----------------------------- symbol definition -----------------------------

symbol_def:   _SET 			definition+ 			_END -> set_list
			| _PARAMETER 	definition+ 			_END -> parameter_list
			| _SCALAR 		definition+ 			_END -> scalar_list
			| _VARIABLE 	definition+ 			_END -> variable_list
			| _PVARIABLE 	definition+ 			_END -> p_variable_list
			| _BVARIABLE 	definition+ 			_END -> b_variable_list
			| _EQUATION 	definition+ 			_END -> equation_list
			| _TABLE 		table_definition 		_END -> table
			| _ALIAS 		_LPAR index_list _RPAR 	_END -> alias_list


// ---------------------------- equation definition ----------------------------

eq_def: symbol [conditional] ".." lhs equation_types rhs _END
lhs: expression
rhs: expression


// ----------------------------- model definition ------------------------------

model_def: _MODEL single_model_def+ _END
single_model_def: string [model_description] "/" symbol_name ("," symbol_name)* "/"
model_description: description


// ------------------------------ function import ------------------------------

func_import: _FUNCTION (internal_func_name _SLASH internal_lib_name _DOT func_name _SLASH)+ _END
internal_func_name: string
internal_lib_name: string
func_name: string


// ------------------------------ file statement -------------------------------

file_st: _FILE filename [description] [_SLASH (filename | "''") _SLASH] ([_COMMA] filename [description] [_SLASH (filename | "''") _SLASH])* _END


// ---------------------------------- acronym ----------------------------------

acronym_def: _ACRONYM identifier (_COMMA identifier)* _END


// =========================== EXECUTION STATEMENTS ============================

// ------------------------------------ put ------------------------------------

put_st: _PUT (filename | output_item [[_OUTPUT_SEP] output_item] | (filename output_item [[_OUTPUT_SEP] output_item])) [[_OUTPUT_SEP] (filename | output_item [[_OUTPUT_SEP] output_item] | (filename output_item [[_OUTPUT_SEP] output_item]))]* _END
_OUTPUT_SEP: _COMMA | " "+
?output_item: ((SIGNED_NUMBER | symbol | quoted_text | cli_param) [local_formatting]) | cursor_controller+
!cursor_controller: _SLASH+ | "#" NUMBER | "@" NUMBER
// ?quoted_text: (/[']/ LEGAL_CHARACTER_EXCEPT_SINGLE_QUOTE* /[']/) | (/["]/ LEGAL_CHARACTER_EXCEPT_DOUBLE_QUOTE* /["]/)
quoted_text: FLEX_ESCAPED_STRING
!local_formatting: ":" ["<" | ">" | "<>"] [NUMBER] [":" NUMBER]


// ------------------------------- put variants --------------------------------

?put_st_variants: put_utility_st | putclear | putclose | puthd | putpage | puttl

put_utility_st: _PUTUTILITY [filename] "'" p_u_command "'" _SLASH p_u_argument+ ("'" p_u_command "'" _SLASH p_u_argument+)* _END
!p_u_command:  "assignText" | "click" | "dropEnv" | "ECArguments" | "exec"
			| "exec.aSync" | "exec.aSyncNC" | "exec.checkErrorLevel"
			| "gdxIn" | "gdxOut" | "glb" | "htm" | "inc" | "incLog"
			| "incMsg" | "incMsgLog" | "log" | "msg" | "msgLog" | "ren"
			| "save" | "setEnv" | "shell" | "shell.checkErrorLevel"
			| "solver" | "title" | "winMsg"
p_u_argument: (["'"] string | (symbol [local_formatting]) | filename ["'"]) | quoted_text

putclear: _PUTCLEAR _END
putclose: _PUTCLOSE ([filename] output_item*)* _END
puthd: _PUTHD [filename] output_item ([_COMMA] output_item)* _END
putpage: _PUTPAGE [conditional] [filename] [output_item] ([_COMMA] output_item)* _END
puttl: _PUTTL [filename] output_item ([_COMMA] output_item)* _END

// --------------------------------- for loop ----------------------------------

for_st: _FOR _LPAR symbol "=" start_n (("to" | "To" | "TO") | ("downto" | "Downto" | "Downto")) end_n [("by" | "By" | "BY") step_n] _COMMA statement+ _RPAR _END
?start_n: SIGNED_NUMBER
?end_n: SIGNED_NUMBER
?step_n: NUMBER


// ----------------------------------- break -----------------------------------

break_st: _BREAK [conditional] [break_times] _END
break_times: NUMBER


// --------------------------------- continue ----------------------------------

continue_st: _CONTINUE [conditional] _END


// ------------------------------------ $if ------------------------------------
// conditional compilation
// https://www.gams.com/latest/docs/UG_DollarControlOptions.html#DOLLARif

macro_conditional: _DOLLARIF negate? macro_condition
macro_condition: _M_SET string -> env_test
				| expression


// ------------------------------- if statement --------------------------------

if_st: _IF _LPAR expression _COMMA statement+ (elseif_st)* [else_statement] _RPAR _END
elseif_st: _ELSEIF expression _COMMA statement+
else_statement: _ELSE statement+


// ----------------------------------- loop ------------------------------------

loop_st: _LOOP _LPAR index_item [conditional] _COMMA statement+ _RPAR _END


// ---------------------------------- repeat -----------------------------------

repeat_st: _REPEAT _LPAR statement+ _UNTIL expression _RPAR _END


// ---------------------------------- while -----------------------------------

while_st: _WHILE _LPAR expression _COMMA statement+ _RPAR _END


// ----------------------------------- abort -----------------------------------

abort_st: _ABORT [(identifier | description) (_COMMA identifier | description)*] _END


// ----------------------------------- macro -----------------------------------

// macro: macro_include  _NL
// 	| _DOLLAR macro_set _NL
// 	| _DOLLAR macro_words~1..5 [" "]~0..5 _NL
// 	| _DOLLAR ("title" | "TITLE" | "Title") title_name _NL

// macro_include: _DOLLAR "include" filename
// macro_set: _M_SET WORD WORD
// macro_words: _M_EMPTY
// 			| _M_LISTING
// 			| _M_DELIM
// title_name: /.*?(?<!\n)/

macro: _DOLLAR dollar_option [dollar_argument_list] (dollar_option [dollar_argument_list])* _NL
?dollar_argument_list: /[^\n]+/


// ---------------------------------- execute ----------------------------------

execute: execute_unload _END

execute_unload: _EXECUTE_UNLOAD _QUOTE filename _QUOTE symbol+

filename: (FILENAME_BASE | cli_param | _SLASH) [_DOT extension]
FILENAME_BASE: /[A-Za-z0-9+\-=(){}\[\],!_&^#%@$]+/
quoted_string: /['"]/ string /['"]/
cli_param: "%" string "%"
extension: string


_EXECUTE_UNLOAD: "execute_unload"

_M_EMPTY:	"onempty" | "offempty"
_M_LISTING: "onlisting" | "offlisting"
_M_DELIM: "ondelim" | "offdelim"
_M_SET: "set"


// ---------------------------------- display ----------------------------------

display: _DISPLAY symbol ([_COMMA] symbol )* _END



// ------------------------------ solve statement ------------------------------

solve_st: _SOLVE string ( "using" model_type sense symbol_name | sense symbol_name "using" model_type) _END
model_type: string
sense: string


// -------------------------------- assignment ---------------------------------

assignment: symbol [conditional] "=" expression _END


// ---------------------------------- option -----------------------------------

option: _OPTION option_name "=" option_value _END
?option_name: identifier
?option_value: SIGNED_NUMBER | WORD


// ============================== BASIC ELEMENTS ===============================

value.2 		: SIGNED_NUMBER | ["-"] ["."] SIGNED_NUMBER
string			: WORD
description		: FLEX_ESCAPED_STRING | WORDS


// -------------------------------- definition ---------------------------------

definition: symbol [description] [data] [_COMMA]
table_definition: symbol [description] [table_data]


// ----------------------------------- data ------------------------------------

data			: _SLASH [data_element [set_description] ((_COMMA|_NL) data_element [set_description])*] _SLASH
set_description: description
// table_data 		: (symbol_id | value | macro )+
table_data 		: index_row _NL (symbol_id value+ [_NL])+
?index_row		: symbol_id+
data_element	: value
				| symbol_id
				| symbol_range
				| symbol_id value -> idx_value
				| macro


// -------------------------------- expression ---------------------------------

ADD_OP: "+" | "-"
MUL_OP: "*" | "/"
POWER_OP: "**"

// arithmetic operations and parenthesis
?add_expr:    add_expr ADD_OP mul_expr
    		| mul_expr
?mul_expr:    mul_expr MUL_OP pow_expr
    		| pow_expr
?pow_expr:    primary POWER_OP pow_expr
    		| primary
?primary: indexed_operation | func_expression | value | symbol | _LPAR add_expr _RPAR

// indexed operations
indexed_operation: operator_indexed _LPAR (index_list | _LPAR index_list _RPAR) [conditional] _COMMA expression _RPAR

// general expressions
?expression:   _LPAR expression _RPAR
			| func_expression
			| expression operator_logical expression
			| expression operator_relation expression
			| add_expr
			| expression conditional
			| negate expression
			| minus expression
			| value
			| symbol
			| cli_param
			| quoted_string // this is for compiler expressions
			| indexed_operation

func_expression: (math_functions | string_functions | time_functions) _LPAR func_arguments _RPAR
?func_arguments: expression (_COMMA expression)*

negate: "not" | "NOT"
?minus: "-"

conditional: "$" expression


// ---------------------------------- symbol -----------------------------------

symbol 			: symbol_name[suffix][symbol_index]
symbol_index	: _LPAR index_list _RPAR
index_list		: index_item (_COMMA index_item )*
!index_item		: symbol_name "++" value -> circular_lead
				| symbol_name "--" value -> circular_lag
				| symbol_name "+" value -> lead
				| weak_symbol_name "-" value -> lag
				| symbol_name
				| symbol_element
				| cli_param
				| "*"
symbol_range    : identifier "*" identifier
symbol_id 		: identifier ("." identifier)*
symbol_element  : _QUOTE identifier _QUOTE
				| _QUOTE cli_param _QUOTE
symbol_name		: identifier
?weak_symbol_name: /[a-zA-Z][\w]*/ | SIGNED_NUMBER
// ?identifier 	: WORD_IDENTIFIER|INTEGER
// TODO: add underscore to identifier
identifier 		: WORD_IDENTIFIER | SIGNED_NUMBER
sep				: _COMMA | _NL
suffix			: _DOT string


// =================================== MISC ====================================

// --------------------------------- keywords ----------------------------------

_ABORT: "abort" | "Abort" | "ABORT"
_ACRONYM: ("Acronym" ["s"]) | ("acronym" ["s"]) | ("ACRONYM" ["S"])
_ALIAS: "alias" | "Alias" | "ALIAS"
_BREAK: "break" | "Break" | "BREAK"
_BVARIABLE: ("binary variable" ["s"]) | ("Binary variable" ["s"]) | ("Binary Variable" ["s"]) | ("BINARY VARIABLE" ["S"])
_CONTINUE: "continue" | "Continue" | "CONTINUE"
_DISPLAY: "display" | "Display" | "DISPLAY"
_DOLLARIF: "$if" | "$If" | "$IF"
_DOLLAR: "$"
_ELSEIF: "elseif" | "Elseif" | "ELSEIF"
_ELSE: "else" | "Else" | "ELSE"
_EQUATION: ("equation" ["s"]) | ("Equation" ["s"]) | ("EQUATION" ["S"])
_FILE: ("File" ["s"]) | ("file" ["s"]) | ("FILE" ["S"])
_FOR: "for" | "For" | "FOR"
_FUNCTION: "function" | "Function" | "FUNCTION"
_IF: "if" | "If" | "IF"
_LOOP: "loop" | "Loop" | "LOOP"
_MODEL: "model" | "Model" | "MODEL"
_OPTION: "OPTION" | "option"
_PARAMETER: ("parameter" ["s"]) | ("Parameter" ["s"]) | ("PARAMETER" ["S"])
_PUT: "put" | "Put" | "PUT"
_PUTUTILITY: "put_utility" | "put_utilities"
_PUTCLEAR: "putclear"
_PUTCLOSE: "putclose"
_PUTHD: "puthd"
_PUTPAGE: "putpage"
_PUTTL: "puttl"
_PVARIABLE: ("positive variable" ["s"]) | ("Positive variable" ["s"]) | ("Positive Variable" ["s"]) | ("POSITIVE VARIABLE" ["S"])
_REPEAT: "repeat" | "Repeat" | "REPEAT"
_SCALAR: ("scalar" ["s"]) | ("Scalar" ["s"]) | ("SCALAR" ["S"])
_SET: ("set" ["s"]) | ("Set" ["s"]) | ("SET" ["S"])
_SOLVE: "solve" | "Solve" | "SOLVE"
_TABLE: "table" | "Table" | "TABLE"
_UNTIL: "until" | "Until" | "UNTIL"
_VARIABLE: ["free " | "Free " | "FREE "] (("variable" ["s"]) | ("Variable" ["s"]) | ("VARIABLE" ["S"]))
_WHILE: "while" | "While" | "WHILE"

// -------------------------------- punctuation --------------------------------

_COMMA: ","
_DOT: "."
_END: ";"
_LPAR: "("
_RPAR: ")"
_SLASH: "/"
_QUOTE: "'" | "\""
_SINGLEQUOTE: "'"
_DOUBLEQUOTE: "\""


// ------------------------------- word & string -------------------------------

// 		[\w]: [a-zA-Z0-9_]
// 		[\w-]: [\w] plus hyphen
// word started with a letter
WORD_IDENTIFIER : /[a-zA-Z][\w]*/
WORD			: /[\w]+/
WORDS : /[^\/]+/
// 		.: any one chracter but new line
// 		.?: curb greediness
// 		(): group sub-expressions
// 		?<!: negative lookbehind; looking for "\'" or "\"" without \\ before it
FLEX_ESCAPED_STRING : /['"].*?(?<!\\)['"]/

// LEGAL_CHARACTER: /[A-Za-z0-9+\-=<>(){}\[\]'\"\\\/,;:.?!  _&^#*%@$]/
// LEGAL_CHARACTER_EXCEPT_SINGLE_QUOTE: /[A-Za-z0-9+\-=<>(){}\[\]\"\\\/,;:.?!  _&^#*%@$]/
// LEGAL_CHARACTER_EXCEPT_DOUBLE_QUOTE: /[A-Za-z0-9+\-=<>(){}\[\]'\\\/,;:.?!  _&^#*%@$]/

// ------------------------------ comments and WS ------------------------------

// 		^: assert position at line beginning
// 		[^\n]: a character other than newline
// add `\n` at the beginning to correct detect comments
// although `_NL` is ignored, lark is still able to identify `\n` for comments
// changed + -> * to match empty comments
COMMENT : /\n\*[^\n]*/
%ignore COMMENT

COMMENT_BLOCK: ("$ontext" | "$ONTEXT" | "$onText") /(\S|\s)*?/ ("$offtext" | "$OFFTEXT" | "$offText")

// the updated `WS` exclude `\n` for the comments
WS: (/[ \t\f\r]/+) | (/(\n(?!\*))/+)
%ignore WS
%ignore _NL

// ------------------------------ dollar options -------------------------------

!?dollar_option: "comment" | "eolCom" | "inlineCom" | "maxCol" | "minCol"
| "offEolCom" | "offInline" | "offMargin" | "offNestCom" | "onEolCom"
| "onInline" | "onMargin" | "onNestCom" | "dollar" | "offDelim"
| "offDigit" | "offEmbedded" | "offEmpty" | "offEnd" | "offEps" | "offExternalInput"
| "offGlobal" | "offIDCProtect" | "offSuffixDLVars" | "offSuffixAlgebraVars" | "offUNDF"
| "offUni" | "offWarning" | "onDelim" | "onDigit" | "onEmbedded" | "onEmpty"
| "onEnd" | "onEps" | "onExternalInput" | "onGlobal" | "onIDCProtect" | "onSuffixDLVars"
| "onSuffixAlegbraVars" | "onUNDF" | "onUni" | "onWarning" | "use205" | "use225" | "use999"
| "version" | "double" | "echo" | "echoN" | "eject" | "hidden" | "lines" | "log" | "offDollar"
| "offEcho" | "offExternalOutput" | "offEpsToZero" | "offInclude" | "offListing" | "offLog"
| "offPut" | "offUpper" | "offVerbatim" | "onDollar" | "onEcho" | "onEchoS" | "onEchoV"
| "onEpsToZero" | "onExternalOutput" | "onInclude" | "onListing" | "onLog" | "onPut" | "onPutS"
| "onPutV" | "onUpper" | "onVerbatim" | "remark" | "single" | "stars" | "sTitle" | "title" | "TITLE"
| "offSymList" | "offSymXRef" | "offUElList" | "offUElXRef" | "onSymList" | "onSymXRef"
| "onUElList" | "onUElXRef" | "abort" | "batInclude" | "call" | "call" | "call" | "clear"
| "clearError" | "else" | "elseIf" | "elseIfE" | "elseIfI" | "endif" | "error" | "exit"
| "funcLibIn" | "goto" | "hiddenCall" | "hiddenCall" | "hiddenCall" | "if" | "ifE" | "ifI"
| "ifThen" | "ifThenE" | "ifThenI" | "include" | "kill" | "label" | "libInclude" | "offCheckErrorLevel"
| "offECImplicitLoad" | "offEmbeddedCode" | "offFiltered" | "offMulti" | "offOrder" | "offRecurse"
| "offStrictSingleton" | "onCheckErrorLevel" | "onECImplicitLoad" | "onEmbeddedCode" | "onEmbeddedCodeS"
| "onEmbeddedCodeV" | "onFiltered" | "onMulti" | "onMultiR" | "onOrder" | "onRecurse"
| "onStrictSingleton" | "maxGoTo" | "phantom" | "shift" | "stop" | "sysInclude"
| "terminate" | "warning" | "gdxIn" | "gdxLoad" | "gdxOut" | "gdxUnload" | "load"
| "loadDC" | "loadDCM" | "loadDCR" | "loadFiltered" | "loadFilteredM" | "loadFilteredR"
| "loadM" | "loadR" | "offExternalInput" | "offExternalOutput" | "offFiltered" | "onExternalInput"
| "onExternalOutput" | "onFiltered" | "unLoad" | "drop" | "dropGlobal" | "dropLocal"
| "dropEnv" | "escape" | "eval" | "eval" | "evalGlobal" | "evalGlobal" | "evalLocal"
| "evalLocal" | "prefixPath" | "scratchFileName" | "setArgs" | "setComps"
| "setDDList" | "setDDList" | "setEnv" | "set" | "setGlobal" | "setLocal" | "setNames"
| "show" | "showFiles" | "showMacros" | "showVariables" | "splitOption" | "macro"
| "offDotL" | "offDotScale" | "offExpand" | "offLocal" | "offMacro" | "onDotL"
| "onDotScale" | "onExpand" | "onLocal" | "onMacro" | "compress" | "decompress"
| "encrypt" | "expose" | "hide" | "protect" | "purge"
// | "onText" | "offText"

// --------------------------------- equations ---------------------------------

equation_types: "=e=" -> eqn_equality
				| "=g=" -> eqn_greater_than
				| "=l=" -> eqn_less_than
				| "=n=" -> eqn_no_relationship
				| "=x=" -> eqn_external_program
				| "=c=" -> eqn_conic_constraint
				| "=b=" -> eqn_boolean_equation


operator_indexed: "sum"		-> summation
				| "prod"	-> product
				| "smin"	-> set_minimum
				| "smax" 	-> set_maximum

operator_expression: "**" 	-> exponentiation
					| "*"	-> multiplication
					| "/"	-> division
					| "+"	-> addition
					| "-"   -> subtraction

operator_logical: "not" 	-> bool_not
				| "and" 	-> bool_and
				| "or"		-> bool_or
				| "xor"		-> bool_or

operator_relation: ( "=" | "eq" )		-> rel_eq
				| ( ">" | "gt" )		-> abs_gt
				| ( "<" | "lt" )		-> abs_lt
				| ( ">=" | "ge" )		-> rel_ge
				| ( "<=" | "le" )		-> rel_le
				| ( "<>" | "ne" )		-> rel_ne
				| ( "==" )				-> rel_eq_macro


// --------------------------------- functions ---------------------------------

math_functions:  "abs" -> fn_abs
		| "arccos" 		-> fn_arccos
		| "arcsin" 		-> fn_arcsin
		| "arctan" 		-> fn_arctan
		| "arctan2" 	-> fn_arctan2
		| "beta" 		-> fn_beta
		| "betaReg" 	-> fn_beta_reg
		| "binomial" 	-> fn_binomial
		| "ceil" 		-> fn_ceil
		| "centropy" 	-> fn_centropy
		| "cos" 		-> fn_cos
		| "cosh" 		-> fn_cosh
		| "cvPower" 	-> fn_cv_power
		| "div" 		-> fn_div
		| "div0" 		-> fn_div0
		| "eDist" 		-> fn_e_dist
		| "entropy" 	-> fn_entropy
		| "errorf" 		-> fn_errorf
		| "execSeed" 	-> fn_exec_seed
		| "exp" 		-> fn_exp
		| "fact" 		-> fn_fact
		| "floor" 		-> fn_floor
		| "frac" 		-> fn_frac
		| "gamma" 		-> fn_gamma
		| "gammaReg" 	-> fn_gamma_reg
		| "log" 		-> fn_log
		| "logBeta" 	-> fn_log_beta
		| "logGamma" 	-> fn_log_gamma
		| "log10" 		-> fn_log10
		| "log2" 		-> fn_log2
		| "max" 		-> fn_max
		| "min" 		-> fn_min
		| "mod" 		-> fn_mod
		| "ncpCM" 		-> fn_ncp_cm
		| "ncpF" 		-> fn_ncp_f
		| "ncpVUpow" 	-> fn_ncp_vu_pow
		| "ncpVUsin" 	-> fn_ncp_vu_sin
		| "normal" 		-> fn_normal
		| "pi" 			-> fn_pi
		| "poly" 		-> fn_poly
		| "power" 		-> fn_power
		| "randBinomial" -> fn_rand_binomial
		| "randLinear" 	-> fn_rand_linear
		| "randTriangle" -> fn_rand_triangle
		| "round" 		-> fn_round
		| "rPower" 		-> fn_r_power
		| "sigmoid" 	-> fn_sigmoid
		| "sign" 		-> fn_sign
		| "signPower" 	-> fn_sign_power
		| "sin" 		-> fn_sin
		| "sinh" 		-> fn_sinh
		| "slexp" 		-> fn_slexp
		| "sllog10" 	-> fn_sllog10
		| "slrec" 		-> fn_slrec
		| "sqexp" 		-> fn_sqexp
		| "sqlog10" 	-> fn_sqlog10
		| "sqr" 		-> fn_sqr
		| "sqrec" 		-> fn_sqrec
		| "sqrt" 		-> fn_sqrt
		| "tan" 		-> fn_tan
		| "tanh" 		-> fn_tanh
		| "trunc" 		-> fn_trunc
		| "uniform" 	-> fn_uniform
		| "uniformInt" 	-> fn_uniform_int
		| "vcPower" 	-> fn_vc_power

string_functions: "card" 	-> fn_card
				| "ord" 	-> fn_ord
				| ("sameas" | "sameAs" | "SameAs" | "SAMEAS")	-> fn_sameas

time_functions: "gday"		-> fn_gday
			| "gdow"		-> fn_gdow
			| "ghour"		-> fn_ghour
			| "gleap"		-> fn_gleap
			| "gmillisec"	-> fn_gmillisec
			| "gminute"		-> fn_gminute
			| "gmonth"		-> fn_gmonth
			| "gsecond"		-> fn_gsecond
			| "gyear"		-> fn_gyear
			| "jdate"		-> fn_jdate
			| "jnow"		-> fn_jnow
			| "jstart"		-> fn_jstart
			| "jtime"		-> fn_jtime


// ---------------------------------- imports ----------------------------------

// %import common.WS
%import common.NUMBER
%import common.SIGNED_NUMBER
%import common.NEWLINE -> _NL
